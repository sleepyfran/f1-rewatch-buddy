---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import TitleWithNavigation from "../../../components/TitleWithNavigation.astro";
import { getEntry } from "astro:content";
import QualifyingResults from "../../../components/QualifyingResults.astro";
import RaceResults from "../../../components/RaceResults.astro";
import DriverStandings from "../../../components/DriverStandings.astro";
import { uniqBy } from "lodash-es";

export async function getStaticPaths() {
  const races = await getCollection("results");
  const uniqRaces = uniqBy(
    races,
    ({ data: { season, round } }) => `${season}-${round}`
  );

  return uniqRaces.map(({ data: { season, round } }) => ({
    params: { season: String(season), round: String(round) },
  }));
}

const { season: seasonStr, round: roundStr } = Astro.params;

const season = parseInt(seasonStr);
const round = parseInt(roundStr);

const allRaces = await getCollection("results");
const allSeasonRounds = allRaces.filter(
  ({ data: { season: raceSeason } }) => raceSeason === season
);

// This is technically the information for the first driver in the round,
// but we can use it to get shared information about the round.
const roundInformation = allSeasonRounds.find(
  ({ data: { round: raceRound } }) => raceRound === round
);
if (!roundInformation) {
  throw new Error(`Round ${round} not found for season ${season}`);
}

const lastRound = Math.max(
  ...allSeasonRounds.map(({ data: { round } }) => round)
);

const previousRound = round > 1 ? round - 1 : undefined;
const nextRound = round < lastRound ? round + 1 : undefined;

const { circuitId } = roundInformation.data;

const { data: circuit } = await getEntry(circuitId);
---

<Layout>
  <main data-season={season} data-round={round}>
    <TitleWithNavigation
      previous={previousRound
        ? `/seasons/${season}/${previousRound}`
        : undefined}
      next={nextRound ? `/seasons/${season}/${nextRound}` : undefined}
      title={`Season ${season}, ${circuit.country}`}
    />
    <div class="flex items-baseline gap-4">
      <h4>
        <a target="_blank" href={circuit.wikiUrl}>{circuit.name}</a>
      </h4>
      <p id="watch-status" class="font-bold">Pending to watch</p>
    </div>

    <div class="flex items-baseline gap-2">
      <p>Mark as:</p>
      <button id="mark-as-pending" class="button-like-sm hidden">Pending</button
      >
      <!-- <button id="mark-as-watching" class="button-like-sm"
        >Currently watching</button
      > -->
      <button id="mark-as-watched" class="button-like-sm">Watched</button>
    </div>

    <div id="before-watching-section" class="mt-4 app-border-t pt-4">
      <h2 class="font-light mb-4">Before you watch</h2>

      <div class="my-2">
        <h3 class="mb-4">Qualifying Results</h3>
        <QualifyingResults season={season} round={round} />
      </div>
    </div>

    <div class="mt-4">
      <h2 class="font-light mb-4">After you watch</h2>
      <p id="after-watch-message">
        The results of the race and other info will be shown once you mark the
        race as watched.
      </p>

      <div id="race-results" class="my-2 hidden">
        <h3 class="mb-4">Race Results</h3>
        <RaceResults season={season} round={round} />
      </div>

      <div id="driver-standings" class="my-2 hidden">
        <h3 class="mb-4">Driver Standings after race</h3>
        <DriverStandings season={season} round={round} />
      </div>
    </div>
  </main>
</Layout>

<script>
  import * as Storage from "../../../storage";

  const seasonStr = document.querySelector("main")?.dataset.season;
  const roundStr = document.querySelector("main")?.dataset.round;

  if (!seasonStr || !roundStr) {
    throw new Error("Season or round not set in the DOM");
  }

  const season = parseInt(seasonStr);
  const round = parseInt(roundStr);

  if (isNaN(season) || isNaN(round)) {
    throw new Error("Invalid season or round");
  }

  const raceStatus = Storage.retrieveRace(season, round);

  const watchStatus = document.getElementById("watch-status")!;
  const beforeWatchingSection = document.getElementById(
    "before-watching-section"
  )!;
  const afterWatchMessage = document.getElementById("after-watch-message")!;
  const raceResults = document.getElementById("race-results")!;
  const driverStandings = document.getElementById("driver-standings")!;
  const markAsPendingButton = document.getElementById("mark-as-pending")!;
  const markAsWatchedButton = document.getElementById("mark-as-watched")!;
  // const markAsWatchingButton = document.getElementById("mark-as-watching")!;

  switch (raceStatus.status) {
    case "pending":
      watchStatus.innerText = "Pending to watch";
      markAsPendingButton.classList.add("hidden");
      // markAsWatchingButton.classList.remove("hidden");
      markAsWatchedButton.classList.remove("hidden");
      break;
    case "watching":
      watchStatus.innerText = "Currently watching";
      markAsPendingButton.classList.remove("hidden");
      // markAsWatchingButton.classList.add("hidden");
      markAsWatchedButton.classList.remove("hidden");
      break;
    case "watched":
      watchStatus.innerText = "Watched";
      beforeWatchingSection.classList.add("hidden");
      afterWatchMessage.classList.add("hidden");
      raceResults.classList.remove("hidden");
      driverStandings.classList.remove("hidden");
      markAsWatchedButton.classList.add("hidden");
      // markAsWatchingButton.classList.add("hidden");
      markAsPendingButton.classList.remove("hidden");
      break;
  }

  markAsPendingButton.addEventListener("click", () => {
    Storage.setAsPending(season, round);
    window.location.reload();
  });

  markAsWatchedButton.addEventListener("click", () => {
    Storage.setAsWatched(season, round);
    window.location.reload();
  });

  // markAsWatchingButton.addEventListener("click", () => {
  //   Storage.setAsWatching(season, round, 0);
  //   window.location.reload();
  // });
</script>
