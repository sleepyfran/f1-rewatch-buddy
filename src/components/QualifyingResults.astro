---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import { partition, sortBy } from "lodash-es";
import Table from "./Table.astro";

type Props = {
  season: number;
  round: number;
};

const { season, round } = Astro.props;

const allRaces = await getCollection("results");
const roundResults = allRaces.filter(
  ({ data: { season: raceSeason, round: raceRound } }) =>
    raceSeason === season && raceRound === round
);

const [grid, nonQualifiedGrid] = partition(
  roundResults,
  ({ data: { grid } }) => grid > 0
);

async function resolveReferences({ data }: CollectionEntry<"results">) {
  const constructor = await getEntry(data.constructorId);
  const driver = await getEntry(data.driverId);

  return {
    ...data,
    driver: driver.data,
    constructor: constructor.data,
  };
}

const orderedGrid = await Promise.all(
  sortBy(grid, ({ data: { grid } }) => grid).map(resolveReferences)
);
const didNotQualify = await Promise.all(
  nonQualifiedGrid.map(resolveReferences)
);
---

<Table
  columns={[
    {
      label: "Grid",
    },
    {
      label: "Driver",
    },
    {
      label: "Constructor",
    },
    {
      label: "Q1",
    },
    {
      label: "Q2",
    },
    {
      label: "Q3",
    },
  ]}
  rows={[...orderedGrid, ...didNotQualify].map((result) => [
    { content: result.grid === 0 ? "DNQ" : result.grid },
    {
      content: `${result.driver.name} ${result.driver.familyName}`,
    },
    { content: result.constructor.name },
    { content: "-" },
    { content: "-" },
    { content: "-" },
  ])}
/>
