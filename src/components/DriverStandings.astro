---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import { sortBy } from "lodash-es";
import Table from "./Table.astro";

type Props = {
  season: number;
  round: number;
};

const { season, round } = Astro.props;

const allDriverStandings = await getCollection("driverStandings");
const roundResults = allDriverStandings.filter(
  ({ data: { season: raceSeason, round: raceRound } }) =>
    raceSeason === season && raceRound === round
);

async function resolveReferences({ data }: CollectionEntry<"driverStandings">) {
  const driver = await getEntry(data.driverId);

  return {
    ...data,
    driver: driver.data,
  };
}

const orderedResults = await Promise.all(
  sortBy(roundResults, ({ data: { position } }) => position).map(
    resolveReferences
  )
);
---

<Table
  columns={[
    {
      label: "Pos.",
    },
    {
      label: "Driver",
    },
    {
      label: "Points",
    },
    {
      label: "Wins",
    },
  ]}
  rows={orderedResults.map((result) => [
    {
      content: result.position,
    },
    {
      content: `${result.driver.name} ${result.driver.familyName}`,
    },
    {
      content: result.points,
    },
    {
      content: result.wins,
    },
  ])}
/>
