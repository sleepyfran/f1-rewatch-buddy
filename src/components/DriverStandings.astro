---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import { sortBy } from "lodash-es";

type Props = {
  season: number;
  round: number;
};

const { season, round } = Astro.props;

const allDriverStandings = await getCollection("driverStandings");
const roundResults = allDriverStandings.filter(
  ({ data: { season: raceSeason, round: raceRound } }) =>
    raceSeason === season && raceRound === round
);

async function resolveReferences({ data }: CollectionEntry<"driverStandings">) {
  const driver = await getEntry(data.driverId);

  return {
    ...data,
    driver: driver.data,
  };
}

const orderedResults = await Promise.all(
  sortBy(roundResults, ({ data: { position } }) => position).map(
    resolveReferences
  )
);

const thClasses = "px-6 py-3 text-left";
---

<table class="app-table">
  <thead class="app-table-head">
    <tr>
      <th scope="col" class={thClasses}>Position</th>
      <th scope="col" class={thClasses}>Driver</th>
      <th scope="col" class={thClasses}>Points</th>
      <th scope="col" class={thClasses}>Wins</th>
    </tr>
  </thead>
  <tbody>
    {
      orderedResults.map(({ position, driver, points, wins }) => (
        <tr class="border-gray-200">
          <td scope="row" class="p-4 w-16">
            {position}
          </td>
          <td class="p-4 w-64">
            {driver.name} {driver.familyName}
          </td>
          <td class="p-4 w-16">{points}</td>
          <td class="p-4 w-16">{wins}</td>
        </tr>
      ))
    }
  </tbody>
</table>
